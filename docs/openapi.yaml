openapi: 3.0.3
info:
  title: MusicOnAPI
  description: Music web app
  version: 1.0.0
components:
  securitySchemes:
    cookieAuth:         # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: JSESSIONID  # cookie name
  schemas:

    User:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: John Snow
      required:  
        - id
        - name

    LoginRequest:
      type: object
      properties:
        id:
          type: number
          example: 1
        login:
          type: string
          example: John Snow
        password:
          type: string
          example: John's password
      required:  
        - login
        - password
        - id

    Album:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: AwesomeAlbumName
        author:
          type: integer
          example: 12
        preview:
          type: string
          example: http://our_cloud_storage/preview_for_awesome_album.jpg

    Track:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: AwesomeSong
        author:
          type: integer
          example: 12
        preview:
          type: string
          example: http://our_cloud_storage/preview_for_awesome_song.jpg
        content:
          type: string
          example: http://our_cloud_storage/song_data.mp3

    Artist:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Dr. Dre

    MainPageData:
      type: object
      properties:
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'

servers:
  - url: http://82.146.45.164:8080
paths:
  /{path_to_static_file}:
    get:
      servers:
        - url: http://82.146.45.164:8080
      parameters:
        - in: path
          name: path_to_static_file
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: file not found

  /api/v1/sign_up:
    post:
      servers:
        - url: http://82.146.45.164:8080
      description: Create new user and return created user info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: John Snow
                password:
                  type: string
                  example: Jonh's password
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' 
        '409':
          description: User has already created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' 
  /api/v1/auth:
    post:
      description: Log in and return the authentication cookie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest' 
      security: []    # no authentication
      responses:
        '200':
          description: >
            Successfully authenticated.
            The session ID is returned in a cookie named `SESSIONID`. You need to include this cookie in subsequent requests.
          headers:
            Set-Cookie:
              schema: 
                type: string
                example: JSESSIONID=abcde12345
        '401':
          description: Authentication failed
  /api/v1/logout:
    post:
      servers:
        - url: http://82.146.45.164:8080
      description: Delete user session by id and delete your cookie
      security:
        - []    # no authentication
        - cookieAuth: [] # or you can have cookie in header. Your sessionId will be deleted
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                  example: 1
      responses:
        '200':
          description: Session deleted
  /api/v1/home:
    get:
      servers:
        - url: http://82.146.45.164:8080
      description: Show tracks, artists, albums
      security:
        - []    # no authentication
        - cookieAuth: [] # or you can have cookie in header. Your sessionId will be deleted
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                  example: 1
      responses:
        '200':
          description: Returns lists of artists, albums and tracks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MainPageData'
