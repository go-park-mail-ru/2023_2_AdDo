// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package playlist

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	track "main/internal/pkg/track"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e1fa5ecDecodeMainInternalPkgPlaylist(in *jlexer.Lexer, out *ToTrackId) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PlaylistId":
			out.PlaylistId = uint64(in.Uint64())
		case "TrackId":
			out.TrackId = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainInternalPkgPlaylist(out *jwriter.Writer, in ToTrackId) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PlaylistId\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.PlaylistId))
	}
	{
		const prefix string = ",\"TrackId\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.TrackId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ToTrackId) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainInternalPkgPlaylist(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ToTrackId) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainInternalPkgPlaylist(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ToTrackId) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainInternalPkgPlaylist(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ToTrackId) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainInternalPkgPlaylist(l, v)
}
func easyjson3e1fa5ecDecodeMainInternalPkgPlaylist1(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint64(in.Uint64())
		case "Name":
			out.Name = string(in.String())
		case "AuthorId":
			out.AuthorId = string(in.String())
		case "AuthorName":
			out.AuthorName = string(in.String())
		case "Preview":
			out.Preview = string(in.String())
		case "Tracks":
			if in.IsNull() {
				in.Skip()
				out.Tracks = nil
			} else {
				in.Delim('[')
				if out.Tracks == nil {
					if !in.IsDelim(']') {
						out.Tracks = make([]track.Response, 0, 0)
					} else {
						out.Tracks = []track.Response{}
					}
				} else {
					out.Tracks = (out.Tracks)[:0]
				}
				for !in.IsDelim(']') {
					var v1 track.Response
					(v1).UnmarshalEasyJSON(in)
					out.Tracks = append(out.Tracks, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainInternalPkgPlaylist1(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"AuthorId\":"
		out.RawString(prefix)
		out.String(string(in.AuthorId))
	}
	{
		const prefix string = ",\"AuthorName\":"
		out.RawString(prefix)
		out.String(string(in.AuthorName))
	}
	{
		const prefix string = ",\"Preview\":"
		out.RawString(prefix)
		out.String(string(in.Preview))
	}
	{
		const prefix string = ",\"Tracks\":"
		out.RawString(prefix)
		if in.Tracks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Tracks {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainInternalPkgPlaylist1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainInternalPkgPlaylist1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainInternalPkgPlaylist1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainInternalPkgPlaylist1(l, v)
}
func easyjson3e1fa5ecDecodeMainInternalPkgPlaylist2(in *jlexer.Lexer, out *Playlists) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Playlists":
			if in.IsNull() {
				in.Skip()
				out.Playlists = nil
			} else {
				in.Delim('[')
				if out.Playlists == nil {
					if !in.IsDelim(']') {
						out.Playlists = make([]Base, 0, 1)
					} else {
						out.Playlists = []Base{}
					}
				} else {
					out.Playlists = (out.Playlists)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Base
					(v4).UnmarshalEasyJSON(in)
					out.Playlists = append(out.Playlists, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainInternalPkgPlaylist2(out *jwriter.Writer, in Playlists) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Playlists\":"
		out.RawString(prefix[1:])
		if in.Playlists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Playlists {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Playlists) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainInternalPkgPlaylist2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Playlists) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainInternalPkgPlaylist2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Playlists) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainInternalPkgPlaylist2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Playlists) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainInternalPkgPlaylist2(l, v)
}
func easyjson3e1fa5ecDecodeMainInternalPkgPlaylist3(in *jlexer.Lexer, out *Name) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainInternalPkgPlaylist3(out *jwriter.Writer, in Name) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Name) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainInternalPkgPlaylist3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Name) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainInternalPkgPlaylist3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Name) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainInternalPkgPlaylist3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Name) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainInternalPkgPlaylist3(l, v)
}
func easyjson3e1fa5ecDecodeMainInternalPkgPlaylist4(in *jlexer.Lexer, out *IsCreator) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IsCreator":
			out.IsCreator = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainInternalPkgPlaylist4(out *jwriter.Writer, in IsCreator) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IsCreator\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsCreator))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IsCreator) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainInternalPkgPlaylist4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IsCreator) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainInternalPkgPlaylist4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IsCreator) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainInternalPkgPlaylist4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IsCreator) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainInternalPkgPlaylist4(l, v)
}
func easyjson3e1fa5ecDecodeMainInternalPkgPlaylist5(in *jlexer.Lexer, out *Id) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainInternalPkgPlaylist5(out *jwriter.Writer, in Id) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Id) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainInternalPkgPlaylist5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Id) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainInternalPkgPlaylist5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Id) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainInternalPkgPlaylist5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Id) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainInternalPkgPlaylist5(l, v)
}
func easyjson3e1fa5ecDecodeMainInternalPkgPlaylist6(in *jlexer.Lexer, out *Base) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = uint64(in.Uint64())
		case "Name":
			out.Name = string(in.String())
		case "AuthorId":
			out.AuthorId = string(in.String())
		case "Preview":
			out.Preview = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainInternalPkgPlaylist6(out *jwriter.Writer, in Base) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"AuthorId\":"
		out.RawString(prefix)
		out.String(string(in.AuthorId))
	}
	{
		const prefix string = ",\"Preview\":"
		out.RawString(prefix)
		out.String(string(in.Preview))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Base) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainInternalPkgPlaylist6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Base) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainInternalPkgPlaylist6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Base) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainInternalPkgPlaylist6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Base) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainInternalPkgPlaylist6(l, v)
}
