// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package user_domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e1fa5ecDecodeMainInternalPkgUser(in *jlexer.Lexer, out *UserCredentials) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Email":
			out.Email = string(in.String())
		case "Password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainInternalPkgUser(out *jwriter.Writer, in UserCredentials) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserCredentials) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainInternalPkgUser(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserCredentials) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainInternalPkgUser(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserCredentials) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainInternalPkgUser(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserCredentials) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainInternalPkgUser(l, v)
}
func easyjson3e1fa5ecDecodeMainInternalPkgUser1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = string(in.String())
		case "Username":
			out.Username = string(in.String())
		case "Email":
			out.Email = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "BirthDate":
			out.BirthDate = string(in.String())
		case "Avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainInternalPkgUser1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"BirthDate\":"
		out.RawString(prefix)
		out.String(string(in.BirthDate))
	}
	{
		const prefix string = ",\"Avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainInternalPkgUser1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainInternalPkgUser1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainInternalPkgUser1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainInternalPkgUser1(l, v)
}
func easyjson3e1fa5ecDecodeMainInternalPkgUser2(in *jlexer.Lexer, out *UploadAvatarResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AvatarUrl":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainInternalPkgUser2(out *jwriter.Writer, in UploadAvatarResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AvatarUrl\":"
		out.RawString(prefix[1:])
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UploadAvatarResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainInternalPkgUser2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UploadAvatarResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainInternalPkgUser2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UploadAvatarResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainInternalPkgUser2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UploadAvatarResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainInternalPkgUser2(l, v)
}
func easyjson3e1fa5ecDecodeMainInternalPkgUser3(in *jlexer.Lexer, out *ResetPasswordInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainInternalPkgUser3(out *jwriter.Writer, in ResetPasswordInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix[1:])
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResetPasswordInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainInternalPkgUser3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResetPasswordInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainInternalPkgUser3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResetPasswordInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainInternalPkgUser3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResetPasswordInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainInternalPkgUser3(l, v)
}
func easyjson3e1fa5ecDecodeMainInternalPkgUser4(in *jlexer.Lexer, out *ForgotPasswordInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeMainInternalPkgUser4(out *jwriter.Writer, in ForgotPasswordInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ForgotPasswordInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeMainInternalPkgUser4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ForgotPasswordInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeMainInternalPkgUser4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ForgotPasswordInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeMainInternalPkgUser4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ForgotPasswordInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeMainInternalPkgUser4(l, v)
}
