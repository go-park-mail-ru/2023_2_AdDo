// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: survey.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SurveyService_SubmitSurvey_FullMethodName   = "/SurveyService/SubmitSurvey"
	SurveyService_IsSubmit_FullMethodName       = "/SurveyService/IsSubmit"
	SurveyService_GetSurveyStats_FullMethodName = "/SurveyService/GetSurveyStats"
	SurveyService_Get_FullMethodName            = "/SurveyService/Get"
	SurveyService_GetAllStats_FullMethodName    = "/SurveyService/GetAllStats"
)

// SurveyServiceClient is the client API for SurveyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyServiceClient interface {
	SubmitSurvey(ctx context.Context, in *Survey, opts ...grpc.CallOption) (*empty.Empty, error)
	IsSubmit(ctx context.Context, in *UserSurvey, opts ...grpc.CallOption) (*IsOk, error)
	GetSurveyStats(ctx context.Context, in *SurveyId, opts ...grpc.CallOption) (*StatResponse, error)
	Get(ctx context.Context, in *SurveyId, opts ...grpc.CallOption) (*Response, error)
	GetAllStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatResponses, error)
}

type surveyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyServiceClient(cc grpc.ClientConnInterface) SurveyServiceClient {
	return &surveyServiceClient{cc}
}

func (c *surveyServiceClient) SubmitSurvey(ctx context.Context, in *Survey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, SurveyService_SubmitSurvey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) IsSubmit(ctx context.Context, in *UserSurvey, opts ...grpc.CallOption) (*IsOk, error) {
	out := new(IsOk)
	err := c.cc.Invoke(ctx, SurveyService_IsSubmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetSurveyStats(ctx context.Context, in *SurveyId, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, SurveyService_GetSurveyStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) Get(ctx context.Context, in *SurveyId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, SurveyService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetAllStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatResponses, error) {
	out := new(StatResponses)
	err := c.cc.Invoke(ctx, SurveyService_GetAllStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyServiceServer is the server API for SurveyService service.
// All implementations must embed UnimplementedSurveyServiceServer
// for forward compatibility
type SurveyServiceServer interface {
	SubmitSurvey(context.Context, *Survey) (*empty.Empty, error)
	IsSubmit(context.Context, *UserSurvey) (*IsOk, error)
	GetSurveyStats(context.Context, *SurveyId) (*StatResponse, error)
	Get(context.Context, *SurveyId) (*Response, error)
	GetAllStats(context.Context, *empty.Empty) (*StatResponses, error)
	mustEmbedUnimplementedSurveyServiceServer()
}

// UnimplementedSurveyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveyServiceServer struct {
}

func (UnimplementedSurveyServiceServer) SubmitSurvey(context.Context, *Survey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSurvey not implemented")
}
func (UnimplementedSurveyServiceServer) IsSubmit(context.Context, *UserSurvey) (*IsOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSubmit not implemented")
}
func (UnimplementedSurveyServiceServer) GetSurveyStats(context.Context, *SurveyId) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyStats not implemented")
}
func (UnimplementedSurveyServiceServer) Get(context.Context, *SurveyId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSurveyServiceServer) GetAllStats(context.Context, *empty.Empty) (*StatResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStats not implemented")
}
func (UnimplementedSurveyServiceServer) mustEmbedUnimplementedSurveyServiceServer() {}

// UnsafeSurveyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyServiceServer will
// result in compilation errors.
type UnsafeSurveyServiceServer interface {
	mustEmbedUnimplementedSurveyServiceServer()
}

func RegisterSurveyServiceServer(s grpc.ServiceRegistrar, srv SurveyServiceServer) {
	s.RegisterService(&SurveyService_ServiceDesc, srv)
}

func _SurveyService_SubmitSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Survey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).SubmitSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_SubmitSurvey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).SubmitSurvey(ctx, req.(*Survey))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_IsSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSurvey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).IsSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_IsSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).IsSubmit(ctx, req.(*UserSurvey))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetSurveyStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetSurveyStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_GetSurveyStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetSurveyStats(ctx, req.(*SurveyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).Get(ctx, req.(*SurveyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetAllStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetAllStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_GetAllStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetAllStats(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyService_ServiceDesc is the grpc.ServiceDesc for SurveyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SurveyService",
	HandlerType: (*SurveyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitSurvey",
			Handler:    _SurveyService_SubmitSurvey_Handler,
		},
		{
			MethodName: "IsSubmit",
			Handler:    _SurveyService_IsSubmit_Handler,
		},
		{
			MethodName: "GetSurveyStats",
			Handler:    _SurveyService_GetSurveyStats_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SurveyService_Get_Handler,
		},
		{
			MethodName: "GetAllStats",
			Handler:    _SurveyService_GetAllStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "survey.proto",
}
