// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: artist.proto

package artist

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArtistService_GetArtistInfo_FullMethodName = "/ArtistService/GetArtistInfo"
	ArtistService_Like_FullMethodName          = "/ArtistService/Like"
	ArtistService_IsLike_FullMethodName        = "/ArtistService/IsLike"
	ArtistService_Unlike_FullMethodName        = "/ArtistService/Unlike"
	ArtistService_FullSearch_FullMethodName    = "/ArtistService/FullSearch"
)

// ArtistServiceClient is the client API for ArtistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtistServiceClient interface {
	GetArtistInfo(ctx context.Context, in *ArtistId, opts ...grpc.CallOption) (*Artist, error)
	Like(ctx context.Context, in *ArtistToUserId, opts ...grpc.CallOption) (*empty.Empty, error)
	IsLike(ctx context.Context, in *ArtistToUserId, opts ...grpc.CallOption) (*IsLikedArtist, error)
	Unlike(ctx context.Context, in *ArtistToUserId, opts ...grpc.CallOption) (*empty.Empty, error)
	FullSearch(ctx context.Context, in *Query, opts ...grpc.CallOption) (*SearchResponse, error)
}

type artistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtistServiceClient(cc grpc.ClientConnInterface) ArtistServiceClient {
	return &artistServiceClient{cc}
}

func (c *artistServiceClient) GetArtistInfo(ctx context.Context, in *ArtistId, opts ...grpc.CallOption) (*Artist, error) {
	out := new(Artist)
	err := c.cc.Invoke(ctx, ArtistService_GetArtistInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) Like(ctx context.Context, in *ArtistToUserId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ArtistService_Like_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) IsLike(ctx context.Context, in *ArtistToUserId, opts ...grpc.CallOption) (*IsLikedArtist, error) {
	out := new(IsLikedArtist)
	err := c.cc.Invoke(ctx, ArtistService_IsLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) Unlike(ctx context.Context, in *ArtistToUserId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ArtistService_Unlike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) FullSearch(ctx context.Context, in *Query, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, ArtistService_FullSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtistServiceServer is the server API for ArtistService service.
// All implementations must embed UnimplementedArtistServiceServer
// for forward compatibility
type ArtistServiceServer interface {
	GetArtistInfo(context.Context, *ArtistId) (*Artist, error)
	Like(context.Context, *ArtistToUserId) (*empty.Empty, error)
	IsLike(context.Context, *ArtistToUserId) (*IsLikedArtist, error)
	Unlike(context.Context, *ArtistToUserId) (*empty.Empty, error)
	FullSearch(context.Context, *Query) (*SearchResponse, error)
	mustEmbedUnimplementedArtistServiceServer()
}

// UnimplementedArtistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArtistServiceServer struct {
}

func (UnimplementedArtistServiceServer) GetArtistInfo(context.Context, *ArtistId) (*Artist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistInfo not implemented")
}
func (UnimplementedArtistServiceServer) Like(context.Context, *ArtistToUserId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedArtistServiceServer) IsLike(context.Context, *ArtistToUserId) (*IsLikedArtist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLike not implemented")
}
func (UnimplementedArtistServiceServer) Unlike(context.Context, *ArtistToUserId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlike not implemented")
}
func (UnimplementedArtistServiceServer) FullSearch(context.Context, *Query) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullSearch not implemented")
}
func (UnimplementedArtistServiceServer) mustEmbedUnimplementedArtistServiceServer() {}

// UnsafeArtistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtistServiceServer will
// result in compilation errors.
type UnsafeArtistServiceServer interface {
	mustEmbedUnimplementedArtistServiceServer()
}

func RegisterArtistServiceServer(s grpc.ServiceRegistrar, srv ArtistServiceServer) {
	s.RegisterService(&ArtistService_ServiceDesc, srv)
}

func _ArtistService_GetArtistInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).GetArtistInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtistService_GetArtistInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).GetArtistInfo(ctx, req.(*ArtistId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistToUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtistService_Like_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).Like(ctx, req.(*ArtistToUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_IsLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistToUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).IsLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtistService_IsLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).IsLike(ctx, req.(*ArtistToUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_Unlike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistToUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).Unlike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtistService_Unlike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).Unlike(ctx, req.(*ArtistToUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_FullSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).FullSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtistService_FullSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).FullSearch(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtistService_ServiceDesc is the grpc.ServiceDesc for ArtistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ArtistService",
	HandlerType: (*ArtistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArtistInfo",
			Handler:    _ArtistService_GetArtistInfo_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _ArtistService_Like_Handler,
		},
		{
			MethodName: "IsLike",
			Handler:    _ArtistService_IsLike_Handler,
		},
		{
			MethodName: "Unlike",
			Handler:    _ArtistService_Unlike_Handler,
		},
		{
			MethodName: "FullSearch",
			Handler:    _ArtistService_FullSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "artist.proto",
}
