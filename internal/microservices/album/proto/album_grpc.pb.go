// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: album.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto1 "main/internal/microservices/session/proto"
	proto "main/internal/microservices/track/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AlbumService_GetRandom_FullMethodName        = "/AlbumService/GetRandom"
	AlbumService_GetMostLiked_FullMethodName     = "/AlbumService/GetMostLiked"
	AlbumService_GetPopular_FullMethodName       = "/AlbumService/GetPopular"
	AlbumService_GetNew_FullMethodName           = "/AlbumService/GetNew"
	AlbumService_GetAlbum_FullMethodName         = "/AlbumService/GetAlbum"
	AlbumService_GetAlbumsByTrack_FullMethodName = "/AlbumService/GetAlbumsByTrack"
	AlbumService_Like_FullMethodName             = "/AlbumService/Like"
	AlbumService_IsLike_FullMethodName           = "/AlbumService/IsLike"
	AlbumService_Unlike_FullMethodName           = "/AlbumService/Unlike"
	AlbumService_GetByUserId_FullMethodName      = "/AlbumService/GetByUserId"
)

// AlbumServiceClient is the client API for AlbumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumServiceClient interface {
	GetRandom(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AlbumsResponse, error)
	GetMostLiked(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AlbumsResponse, error)
	GetPopular(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AlbumsResponse, error)
	GetNew(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AlbumsResponse, error)
	GetAlbum(ctx context.Context, in *AlbumId, opts ...grpc.CallOption) (*AlbumResponse, error)
	GetAlbumsByTrack(ctx context.Context, in *proto.TrackId, opts ...grpc.CallOption) (*AlbumsResponse, error)
	Like(ctx context.Context, in *AlbumToUserId, opts ...grpc.CallOption) (*empty.Empty, error)
	IsLike(ctx context.Context, in *AlbumToUserId, opts ...grpc.CallOption) (*IsLikedAlbum, error)
	Unlike(ctx context.Context, in *AlbumToUserId, opts ...grpc.CallOption) (*empty.Empty, error)
	GetByUserId(ctx context.Context, in *proto1.UserId, opts ...grpc.CallOption) (*AlbumsBase, error)
}

type albumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumServiceClient(cc grpc.ClientConnInterface) AlbumServiceClient {
	return &albumServiceClient{cc}
}

func (c *albumServiceClient) GetRandom(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AlbumsResponse, error) {
	out := new(AlbumsResponse)
	err := c.cc.Invoke(ctx, AlbumService_GetRandom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) GetMostLiked(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AlbumsResponse, error) {
	out := new(AlbumsResponse)
	err := c.cc.Invoke(ctx, AlbumService_GetMostLiked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) GetPopular(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AlbumsResponse, error) {
	out := new(AlbumsResponse)
	err := c.cc.Invoke(ctx, AlbumService_GetPopular_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) GetNew(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AlbumsResponse, error) {
	out := new(AlbumsResponse)
	err := c.cc.Invoke(ctx, AlbumService_GetNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) GetAlbum(ctx context.Context, in *AlbumId, opts ...grpc.CallOption) (*AlbumResponse, error) {
	out := new(AlbumResponse)
	err := c.cc.Invoke(ctx, AlbumService_GetAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) GetAlbumsByTrack(ctx context.Context, in *proto.TrackId, opts ...grpc.CallOption) (*AlbumsResponse, error) {
	out := new(AlbumsResponse)
	err := c.cc.Invoke(ctx, AlbumService_GetAlbumsByTrack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) Like(ctx context.Context, in *AlbumToUserId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, AlbumService_Like_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) IsLike(ctx context.Context, in *AlbumToUserId, opts ...grpc.CallOption) (*IsLikedAlbum, error) {
	out := new(IsLikedAlbum)
	err := c.cc.Invoke(ctx, AlbumService_IsLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) Unlike(ctx context.Context, in *AlbumToUserId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, AlbumService_Unlike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) GetByUserId(ctx context.Context, in *proto1.UserId, opts ...grpc.CallOption) (*AlbumsBase, error) {
	out := new(AlbumsBase)
	err := c.cc.Invoke(ctx, AlbumService_GetByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumServiceServer is the server API for AlbumService service.
// All implementations must embed UnimplementedAlbumServiceServer
// for forward compatibility
type AlbumServiceServer interface {
	GetRandom(context.Context, *empty.Empty) (*AlbumsResponse, error)
	GetMostLiked(context.Context, *empty.Empty) (*AlbumsResponse, error)
	GetPopular(context.Context, *empty.Empty) (*AlbumsResponse, error)
	GetNew(context.Context, *empty.Empty) (*AlbumsResponse, error)
	GetAlbum(context.Context, *AlbumId) (*AlbumResponse, error)
	GetAlbumsByTrack(context.Context, *proto.TrackId) (*AlbumsResponse, error)
	Like(context.Context, *AlbumToUserId) (*empty.Empty, error)
	IsLike(context.Context, *AlbumToUserId) (*IsLikedAlbum, error)
	Unlike(context.Context, *AlbumToUserId) (*empty.Empty, error)
	GetByUserId(context.Context, *proto1.UserId) (*AlbumsBase, error)
	mustEmbedUnimplementedAlbumServiceServer()
}

// UnimplementedAlbumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlbumServiceServer struct {
}

func (UnimplementedAlbumServiceServer) GetRandom(context.Context, *empty.Empty) (*AlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandom not implemented")
}
func (UnimplementedAlbumServiceServer) GetMostLiked(context.Context, *empty.Empty) (*AlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostLiked not implemented")
}
func (UnimplementedAlbumServiceServer) GetPopular(context.Context, *empty.Empty) (*AlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopular not implemented")
}
func (UnimplementedAlbumServiceServer) GetNew(context.Context, *empty.Empty) (*AlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNew not implemented")
}
func (UnimplementedAlbumServiceServer) GetAlbum(context.Context, *AlbumId) (*AlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (UnimplementedAlbumServiceServer) GetAlbumsByTrack(context.Context, *proto.TrackId) (*AlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumsByTrack not implemented")
}
func (UnimplementedAlbumServiceServer) Like(context.Context, *AlbumToUserId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedAlbumServiceServer) IsLike(context.Context, *AlbumToUserId) (*IsLikedAlbum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLike not implemented")
}
func (UnimplementedAlbumServiceServer) Unlike(context.Context, *AlbumToUserId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlike not implemented")
}
func (UnimplementedAlbumServiceServer) GetByUserId(context.Context, *proto1.UserId) (*AlbumsBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUserId not implemented")
}
func (UnimplementedAlbumServiceServer) mustEmbedUnimplementedAlbumServiceServer() {}

// UnsafeAlbumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumServiceServer will
// result in compilation errors.
type UnsafeAlbumServiceServer interface {
	mustEmbedUnimplementedAlbumServiceServer()
}

func RegisterAlbumServiceServer(s grpc.ServiceRegistrar, srv AlbumServiceServer) {
	s.RegisterService(&AlbumService_ServiceDesc, srv)
}

func _AlbumService_GetRandom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetRandom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_GetRandom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetRandom(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_GetMostLiked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetMostLiked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_GetMostLiked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetMostLiked(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_GetPopular_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetPopular(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_GetPopular_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetPopular(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_GetNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_GetNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetNew(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_GetAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetAlbum(ctx, req.(*AlbumId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_GetAlbumsByTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.TrackId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetAlbumsByTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_GetAlbumsByTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetAlbumsByTrack(ctx, req.(*proto.TrackId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumToUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_Like_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).Like(ctx, req.(*AlbumToUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_IsLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumToUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).IsLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_IsLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).IsLike(ctx, req.(*AlbumToUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_Unlike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumToUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).Unlike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_Unlike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).Unlike(ctx, req.(*AlbumToUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_GetByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlbumService_GetByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetByUserId(ctx, req.(*proto1.UserId))
	}
	return interceptor(ctx, in, info, handler)
}

// AlbumService_ServiceDesc is the grpc.ServiceDesc for AlbumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlbumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AlbumService",
	HandlerType: (*AlbumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandom",
			Handler:    _AlbumService_GetRandom_Handler,
		},
		{
			MethodName: "GetMostLiked",
			Handler:    _AlbumService_GetMostLiked_Handler,
		},
		{
			MethodName: "GetPopular",
			Handler:    _AlbumService_GetPopular_Handler,
		},
		{
			MethodName: "GetNew",
			Handler:    _AlbumService_GetNew_Handler,
		},
		{
			MethodName: "GetAlbum",
			Handler:    _AlbumService_GetAlbum_Handler,
		},
		{
			MethodName: "GetAlbumsByTrack",
			Handler:    _AlbumService_GetAlbumsByTrack_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _AlbumService_Like_Handler,
		},
		{
			MethodName: "IsLike",
			Handler:    _AlbumService_IsLike_Handler,
		},
		{
			MethodName: "Unlike",
			Handler:    _AlbumService_Unlike_Handler,
		},
		{
			MethodName: "GetByUserId",
			Handler:    _AlbumService_GetByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "album.proto",
}
