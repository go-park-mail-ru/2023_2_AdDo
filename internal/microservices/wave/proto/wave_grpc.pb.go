// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: wave.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "main/internal/microservices/track/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WaveService_GetMyWaveMusic_FullMethodName = "/WaveService/GetMyWaveMusic"
)

// WaveServiceClient is the client API for WaveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaveServiceClient interface {
	GetMyWaveMusic(ctx context.Context, in *UserIdCount, opts ...grpc.CallOption) (*proto.TracksResponse, error)
}

type waveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWaveServiceClient(cc grpc.ClientConnInterface) WaveServiceClient {
	return &waveServiceClient{cc}
}

func (c *waveServiceClient) GetMyWaveMusic(ctx context.Context, in *UserIdCount, opts ...grpc.CallOption) (*proto.TracksResponse, error) {
	out := new(proto.TracksResponse)
	err := c.cc.Invoke(ctx, WaveService_GetMyWaveMusic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaveServiceServer is the server API for WaveService service.
// All implementations must embed UnimplementedWaveServiceServer
// for forward compatibility
type WaveServiceServer interface {
	GetMyWaveMusic(context.Context, *UserIdCount) (*proto.TracksResponse, error)
	mustEmbedUnimplementedWaveServiceServer()
}

// UnimplementedWaveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWaveServiceServer struct {
}

func (UnimplementedWaveServiceServer) GetMyWaveMusic(context.Context, *UserIdCount) (*proto.TracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyWaveMusic not implemented")
}
func (UnimplementedWaveServiceServer) mustEmbedUnimplementedWaveServiceServer() {}

// UnsafeWaveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaveServiceServer will
// result in compilation errors.
type UnsafeWaveServiceServer interface {
	mustEmbedUnimplementedWaveServiceServer()
}

func RegisterWaveServiceServer(s grpc.ServiceRegistrar, srv WaveServiceServer) {
	s.RegisterService(&WaveService_ServiceDesc, srv)
}

func _WaveService_GetMyWaveMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaveServiceServer).GetMyWaveMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaveService_GetMyWaveMusic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaveServiceServer).GetMyWaveMusic(ctx, req.(*UserIdCount))
	}
	return interceptor(ctx, in, info, handler)
}

// WaveService_ServiceDesc is the grpc.ServiceDesc for WaveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WaveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WaveService",
	HandlerType: (*WaveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMyWaveMusic",
			Handler:    _WaveService_GetMyWaveMusic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wave.proto",
}
