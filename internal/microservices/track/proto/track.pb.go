// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: track.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	proto "main/internal/microservices/session/proto"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserToTracksForLabeling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracks *TracksResponse `protobuf:"bytes,1,opt,name=tracks,proto3" json:"tracks,omitempty"`
	UserId string          `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *UserToTracksForLabeling) Reset() {
	*x = UserToTracksForLabeling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserToTracksForLabeling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserToTracksForLabeling) ProtoMessage() {}

func (x *UserToTracksForLabeling) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserToTracksForLabeling.ProtoReflect.Descriptor instead.
func (*UserToTracksForLabeling) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{0}
}

func (x *UserToTracksForLabeling) GetTracks() *TracksResponse {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *UserToTracksForLabeling) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type TrackToUserDur struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackToUser *TrackToUserId `protobuf:"bytes,1,opt,name=TrackToUser,proto3" json:"TrackToUser,omitempty"`
	Duration    uint32         `protobuf:"varint,2,opt,name=Duration,proto3" json:"Duration,omitempty"`
}

func (x *TrackToUserDur) Reset() {
	*x = TrackToUserDur{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackToUserDur) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackToUserDur) ProtoMessage() {}

func (x *TrackToUserDur) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackToUserDur.ProtoReflect.Descriptor instead.
func (*TrackToUserDur) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{1}
}

func (x *TrackToUserDur) GetTrackToUser() *TrackToUserId {
	if x != nil {
		return x.TrackToUser
	}
	return nil
}

func (x *TrackToUserDur) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type IsLikedTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLiked bool `protobuf:"varint,1,opt,name=isLiked,proto3" json:"isLiked,omitempty"`
}

func (x *IsLikedTrack) Reset() {
	*x = IsLikedTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLikedTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLikedTrack) ProtoMessage() {}

func (x *IsLikedTrack) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLikedTrack.ProtoReflect.Descriptor instead.
func (*IsLikedTrack) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{2}
}

func (x *IsLikedTrack) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

type TrackId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackId uint64 `protobuf:"varint,1,opt,name=trackId,proto3" json:"trackId,omitempty"`
}

func (x *TrackId) Reset() {
	*x = TrackId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackId) ProtoMessage() {}

func (x *TrackId) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackId.ProtoReflect.Descriptor instead.
func (*TrackId) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{3}
}

func (x *TrackId) GetTrackId() uint64 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

type TrackToUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	TrackId uint64 `protobuf:"varint,2,opt,name=trackId,proto3" json:"trackId,omitempty"`
}

func (x *TrackToUserId) Reset() {
	*x = TrackToUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackToUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackToUserId) ProtoMessage() {}

func (x *TrackToUserId) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackToUserId.ProtoReflect.Descriptor instead.
func (*TrackToUserId) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{4}
}

func (x *TrackToUserId) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackToUserId) GetTrackId() uint64 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Preview    string `protobuf:"bytes,3,opt,name=Preview,proto3" json:"Preview,omitempty"`
	Content    string `protobuf:"bytes,4,opt,name=Content,proto3" json:"Content,omitempty"`
	ArtistId   uint64 `protobuf:"varint,5,opt,name=ArtistId,proto3" json:"ArtistId,omitempty"`
	ArtistName string `protobuf:"bytes,6,opt,name=ArtistName,proto3" json:"ArtistName,omitempty"`
	Duration   string `protobuf:"bytes,7,opt,name=Duration,proto3" json:"Duration,omitempty"`
	IsLiked    bool   `protobuf:"varint,8,opt,name=isLiked,proto3" json:"isLiked,omitempty"`
	Lyrics     string `protobuf:"bytes,9,opt,name=Lyrics,proto3" json:"Lyrics,omitempty"`
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{5}
}

func (x *Track) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Track) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Track) GetPreview() string {
	if x != nil {
		return x.Preview
	}
	return ""
}

func (x *Track) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Track) GetArtistId() uint64 {
	if x != nil {
		return x.ArtistId
	}
	return 0
}

func (x *Track) GetArtistName() string {
	if x != nil {
		return x.ArtistName
	}
	return ""
}

func (x *Track) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *Track) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *Track) GetLyrics() string {
	if x != nil {
		return x.Lyrics
	}
	return ""
}

type TracksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracks []*Track `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *TracksResponse) Reset() {
	*x = TracksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_track_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracksResponse) ProtoMessage() {}

func (x *TracksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracksResponse.ProtoReflect.Descriptor instead.
func (*TracksResponse) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{6}
}

func (x *TracksResponse) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

var File_track_proto protoreflect.FileDescriptor

var file_track_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x17, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x75, 0x72, 0x12, 0x30, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0b, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x0c, 0x49, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x22,
	0x23, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4c,
	0x79, 0x72, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x79, 0x72,
	0x69, 0x63, 0x73, 0x22, 0x30, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x32, 0xfd, 0x02, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x12, 0x0f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x75,
	0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x04, 0x53,
	0x6b, 0x69, 0x70, 0x12, 0x0f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x75, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x30,
	0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x0e, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x29, 0x0a, 0x06, 0x49, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x0e, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x49, 0x73, 0x4c,
	0x69, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x06, 0x55,
	0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x0e, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x30, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x07, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x0f,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x13, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x73, 0x4c, 0x69, 0x6b, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69,
	0x6e, 0x67, 0x1a, 0x0f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x29, 0x5a, 0x27, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_track_proto_rawDescOnce sync.Once
	file_track_proto_rawDescData = file_track_proto_rawDesc
)

func file_track_proto_rawDescGZIP() []byte {
	file_track_proto_rawDescOnce.Do(func() {
		file_track_proto_rawDescData = protoimpl.X.CompressGZIP(file_track_proto_rawDescData)
	})
	return file_track_proto_rawDescData
}

var file_track_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_track_proto_goTypes = []interface{}{
	(*UserToTracksForLabeling)(nil), // 0: UserToTracksForLabeling
	(*TrackToUserDur)(nil),          // 1: TrackToUserDur
	(*IsLikedTrack)(nil),            // 2: IsLikedTrack
	(*TrackId)(nil),                 // 3: TrackId
	(*TrackToUserId)(nil),           // 4: TrackToUserId
	(*Track)(nil),                   // 5: Track
	(*TracksResponse)(nil),          // 6: TracksResponse
	(*proto.UserId)(nil),            // 7: UserId
	(*emptypb.Empty)(nil),           // 8: google.protobuf.Empty
}
var file_track_proto_depIdxs = []int32{
	6,  // 0: UserToTracksForLabeling.tracks:type_name -> TracksResponse
	4,  // 1: TrackToUserDur.TrackToUser:type_name -> TrackToUserId
	5,  // 2: TracksResponse.tracks:type_name -> Track
	1,  // 3: TrackService.Listen:input_type -> TrackToUserDur
	1,  // 4: TrackService.Skip:input_type -> TrackToUserDur
	4,  // 5: TrackService.Like:input_type -> TrackToUserId
	4,  // 6: TrackService.IsLike:input_type -> TrackToUserId
	4,  // 7: TrackService.Unlike:input_type -> TrackToUserId
	7,  // 8: TrackService.GetUserLikedTracks:input_type -> UserId
	0,  // 9: TrackService.LabelIsLikedForUser:input_type -> UserToTracksForLabeling
	8,  // 10: TrackService.Listen:output_type -> google.protobuf.Empty
	8,  // 11: TrackService.Skip:output_type -> google.protobuf.Empty
	8,  // 12: TrackService.Like:output_type -> google.protobuf.Empty
	2,  // 13: TrackService.IsLike:output_type -> IsLikedTrack
	8,  // 14: TrackService.Unlike:output_type -> google.protobuf.Empty
	6,  // 15: TrackService.GetUserLikedTracks:output_type -> TracksResponse
	6,  // 16: TrackService.LabelIsLikedForUser:output_type -> TracksResponse
	10, // [10:17] is the sub-list for method output_type
	3,  // [3:10] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_track_proto_init() }
func file_track_proto_init() {
	if File_track_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_track_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserToTracksForLabeling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackToUserDur); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsLikedTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackToUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_track_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_track_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_track_proto_goTypes,
		DependencyIndexes: file_track_proto_depIdxs,
		MessageInfos:      file_track_proto_msgTypes,
	}.Build()
	File_track_proto = out.File
	file_track_proto_rawDesc = nil
	file_track_proto_goTypes = nil
	file_track_proto_depIdxs = nil
}
