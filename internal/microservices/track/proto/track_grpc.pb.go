// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: track.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "main/internal/microservices/session/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrackService_Listen_FullMethodName             = "/TrackService/Listen"
	TrackService_Skip_FullMethodName               = "/TrackService/Skip"
	TrackService_Like_FullMethodName               = "/TrackService/Like"
	TrackService_IsLike_FullMethodName             = "/TrackService/IsLike"
	TrackService_Unlike_FullMethodName             = "/TrackService/Unlike"
	TrackService_GetUserLikedTracks_FullMethodName = "/TrackService/GetUserLikedTracks"
)

// TrackServiceClient is the client API for TrackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackServiceClient interface {
	Listen(ctx context.Context, in *TrackToUserDur, opts ...grpc.CallOption) (*empty.Empty, error)
	Skip(ctx context.Context, in *TrackToUserDur, opts ...grpc.CallOption) (*empty.Empty, error)
	Like(ctx context.Context, in *TrackToUserId, opts ...grpc.CallOption) (*empty.Empty, error)
	IsLike(ctx context.Context, in *TrackToUserId, opts ...grpc.CallOption) (*IsLikedTrack, error)
	Unlike(ctx context.Context, in *TrackToUserId, opts ...grpc.CallOption) (*empty.Empty, error)
	GetUserLikedTracks(ctx context.Context, in *proto.UserId, opts ...grpc.CallOption) (*TracksResponse, error)
}

type trackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackServiceClient(cc grpc.ClientConnInterface) TrackServiceClient {
	return &trackServiceClient{cc}
}

func (c *trackServiceClient) Listen(ctx context.Context, in *TrackToUserDur, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, TrackService_Listen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) Skip(ctx context.Context, in *TrackToUserDur, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, TrackService_Skip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) Like(ctx context.Context, in *TrackToUserId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, TrackService_Like_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) IsLike(ctx context.Context, in *TrackToUserId, opts ...grpc.CallOption) (*IsLikedTrack, error) {
	out := new(IsLikedTrack)
	err := c.cc.Invoke(ctx, TrackService_IsLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) Unlike(ctx context.Context, in *TrackToUserId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, TrackService_Unlike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackServiceClient) GetUserLikedTracks(ctx context.Context, in *proto.UserId, opts ...grpc.CallOption) (*TracksResponse, error) {
	out := new(TracksResponse)
	err := c.cc.Invoke(ctx, TrackService_GetUserLikedTracks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackServiceServer is the server API for TrackService service.
// All implementations must embed UnimplementedTrackServiceServer
// for forward compatibility
type TrackServiceServer interface {
	Listen(context.Context, *TrackToUserDur) (*empty.Empty, error)
	Skip(context.Context, *TrackToUserDur) (*empty.Empty, error)
	Like(context.Context, *TrackToUserId) (*empty.Empty, error)
	IsLike(context.Context, *TrackToUserId) (*IsLikedTrack, error)
	Unlike(context.Context, *TrackToUserId) (*empty.Empty, error)
	GetUserLikedTracks(context.Context, *proto.UserId) (*TracksResponse, error)
	mustEmbedUnimplementedTrackServiceServer()
}

// UnimplementedTrackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrackServiceServer struct {
}

func (UnimplementedTrackServiceServer) Listen(context.Context, *TrackToUserDur) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedTrackServiceServer) Skip(context.Context, *TrackToUserDur) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Skip not implemented")
}
func (UnimplementedTrackServiceServer) Like(context.Context, *TrackToUserId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedTrackServiceServer) IsLike(context.Context, *TrackToUserId) (*IsLikedTrack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLike not implemented")
}
func (UnimplementedTrackServiceServer) Unlike(context.Context, *TrackToUserId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlike not implemented")
}
func (UnimplementedTrackServiceServer) GetUserLikedTracks(context.Context, *proto.UserId) (*TracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLikedTracks not implemented")
}
func (UnimplementedTrackServiceServer) mustEmbedUnimplementedTrackServiceServer() {}

// UnsafeTrackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackServiceServer will
// result in compilation errors.
type UnsafeTrackServiceServer interface {
	mustEmbedUnimplementedTrackServiceServer()
}

func RegisterTrackServiceServer(s grpc.ServiceRegistrar, srv TrackServiceServer) {
	s.RegisterService(&TrackService_ServiceDesc, srv)
}

func _TrackService_Listen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackToUserDur)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).Listen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackService_Listen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).Listen(ctx, req.(*TrackToUserDur))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_Skip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackToUserDur)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).Skip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackService_Skip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).Skip(ctx, req.(*TrackToUserDur))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackToUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackService_Like_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).Like(ctx, req.(*TrackToUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_IsLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackToUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).IsLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackService_IsLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).IsLike(ctx, req.(*TrackToUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_Unlike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackToUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).Unlike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackService_Unlike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).Unlike(ctx, req.(*TrackToUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackService_GetUserLikedTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServiceServer).GetUserLikedTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackService_GetUserLikedTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServiceServer).GetUserLikedTracks(ctx, req.(*proto.UserId))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackService_ServiceDesc is the grpc.ServiceDesc for TrackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TrackService",
	HandlerType: (*TrackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Listen",
			Handler:    _TrackService_Listen_Handler,
		},
		{
			MethodName: "Skip",
			Handler:    _TrackService_Skip_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _TrackService_Like_Handler,
		},
		{
			MethodName: "IsLike",
			Handler:    _TrackService_IsLike_Handler,
		},
		{
			MethodName: "Unlike",
			Handler:    _TrackService_Unlike_Handler,
		},
		{
			MethodName: "GetUserLikedTracks",
			Handler:    _TrackService_GetUserLikedTracks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "track.proto",
}
