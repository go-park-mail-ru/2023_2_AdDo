// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: candidate.proto

package candidate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "main/internal/microservices/session/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CandidateService_GetCandidatesForUser_FullMethodName = "/CandidateService/GetCandidatesForUser"
)

// CandidateServiceClient is the client API for CandidateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CandidateServiceClient interface {
	GetCandidatesForUser(ctx context.Context, in *proto.UserId, opts ...grpc.CallOption) (*Candidates, error)
}

type candidateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCandidateServiceClient(cc grpc.ClientConnInterface) CandidateServiceClient {
	return &candidateServiceClient{cc}
}

func (c *candidateServiceClient) GetCandidatesForUser(ctx context.Context, in *proto.UserId, opts ...grpc.CallOption) (*Candidates, error) {
	out := new(Candidates)
	err := c.cc.Invoke(ctx, CandidateService_GetCandidatesForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CandidateServiceServer is the server API for CandidateService service.
// All implementations must embed UnimplementedCandidateServiceServer
// for forward compatibility
type CandidateServiceServer interface {
	GetCandidatesForUser(context.Context, *proto.UserId) (*Candidates, error)
	mustEmbedUnimplementedCandidateServiceServer()
}

// UnimplementedCandidateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCandidateServiceServer struct {
}

func (UnimplementedCandidateServiceServer) GetCandidatesForUser(context.Context, *proto.UserId) (*Candidates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandidatesForUser not implemented")
}
func (UnimplementedCandidateServiceServer) mustEmbedUnimplementedCandidateServiceServer() {}

// UnsafeCandidateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CandidateServiceServer will
// result in compilation errors.
type UnsafeCandidateServiceServer interface {
	mustEmbedUnimplementedCandidateServiceServer()
}

func RegisterCandidateServiceServer(s grpc.ServiceRegistrar, srv CandidateServiceServer) {
	s.RegisterService(&CandidateService_ServiceDesc, srv)
}

func _CandidateService_GetCandidatesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateServiceServer).GetCandidatesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandidateService_GetCandidatesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateServiceServer).GetCandidatesForUser(ctx, req.(*proto.UserId))
	}
	return interceptor(ctx, in, info, handler)
}

// CandidateService_ServiceDesc is the grpc.ServiceDesc for CandidateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CandidateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CandidateService",
	HandlerType: (*CandidateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCandidatesForUser",
			Handler:    _CandidateService_GetCandidatesForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "candidate.proto",
}
