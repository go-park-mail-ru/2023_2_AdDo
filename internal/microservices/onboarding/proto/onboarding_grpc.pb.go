// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: onboarding.proto

package onboarding

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "main/internal/microservices/artist/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OnboardingService_GetArtists_FullMethodName  = "/OnboardingService/GetArtists"
	OnboardingService_GetGenres_FullMethodName   = "/OnboardingService/GetGenres"
	OnboardingService_SaveGenres_FullMethodName  = "/OnboardingService/SaveGenres"
	OnboardingService_SaveArtists_FullMethodName = "/OnboardingService/SaveArtists"
)

// OnboardingServiceClient is the client API for OnboardingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnboardingServiceClient interface {
	GetArtists(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto.ArtistsBase, error)
	GetGenres(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GenresBase, error)
	SaveGenres(ctx context.Context, in *GenreOnboarding, opts ...grpc.CallOption) (*empty.Empty, error)
	SaveArtists(ctx context.Context, in *ArtistOnboarding, opts ...grpc.CallOption) (*empty.Empty, error)
}

type onboardingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnboardingServiceClient(cc grpc.ClientConnInterface) OnboardingServiceClient {
	return &onboardingServiceClient{cc}
}

func (c *onboardingServiceClient) GetArtists(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto.ArtistsBase, error) {
	out := new(proto.ArtistsBase)
	err := c.cc.Invoke(ctx, OnboardingService_GetArtists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onboardingServiceClient) GetGenres(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GenresBase, error) {
	out := new(GenresBase)
	err := c.cc.Invoke(ctx, OnboardingService_GetGenres_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onboardingServiceClient) SaveGenres(ctx context.Context, in *GenreOnboarding, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, OnboardingService_SaveGenres_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onboardingServiceClient) SaveArtists(ctx context.Context, in *ArtistOnboarding, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, OnboardingService_SaveArtists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnboardingServiceServer is the server API for OnboardingService service.
// All implementations must embed UnimplementedOnboardingServiceServer
// for forward compatibility
type OnboardingServiceServer interface {
	GetArtists(context.Context, *empty.Empty) (*proto.ArtistsBase, error)
	GetGenres(context.Context, *empty.Empty) (*GenresBase, error)
	SaveGenres(context.Context, *GenreOnboarding) (*empty.Empty, error)
	SaveArtists(context.Context, *ArtistOnboarding) (*empty.Empty, error)
	mustEmbedUnimplementedOnboardingServiceServer()
}

// UnimplementedOnboardingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOnboardingServiceServer struct {
}

func (UnimplementedOnboardingServiceServer) GetArtists(context.Context, *empty.Empty) (*proto.ArtistsBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtists not implemented")
}
func (UnimplementedOnboardingServiceServer) GetGenres(context.Context, *empty.Empty) (*GenresBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenres not implemented")
}
func (UnimplementedOnboardingServiceServer) SaveGenres(context.Context, *GenreOnboarding) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGenres not implemented")
}
func (UnimplementedOnboardingServiceServer) SaveArtists(context.Context, *ArtistOnboarding) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveArtists not implemented")
}
func (UnimplementedOnboardingServiceServer) mustEmbedUnimplementedOnboardingServiceServer() {}

// UnsafeOnboardingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnboardingServiceServer will
// result in compilation errors.
type UnsafeOnboardingServiceServer interface {
	mustEmbedUnimplementedOnboardingServiceServer()
}

func RegisterOnboardingServiceServer(s grpc.ServiceRegistrar, srv OnboardingServiceServer) {
	s.RegisterService(&OnboardingService_ServiceDesc, srv)
}

func _OnboardingService_GetArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServiceServer).GetArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnboardingService_GetArtists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServiceServer).GetArtists(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnboardingService_GetGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServiceServer).GetGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnboardingService_GetGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServiceServer).GetGenres(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnboardingService_SaveGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenreOnboarding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServiceServer).SaveGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnboardingService_SaveGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServiceServer).SaveGenres(ctx, req.(*GenreOnboarding))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnboardingService_SaveArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistOnboarding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServiceServer).SaveArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnboardingService_SaveArtists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServiceServer).SaveArtists(ctx, req.(*ArtistOnboarding))
	}
	return interceptor(ctx, in, info, handler)
}

// OnboardingService_ServiceDesc is the grpc.ServiceDesc for OnboardingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnboardingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OnboardingService",
	HandlerType: (*OnboardingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArtists",
			Handler:    _OnboardingService_GetArtists_Handler,
		},
		{
			MethodName: "GetGenres",
			Handler:    _OnboardingService_GetGenres_Handler,
		},
		{
			MethodName: "SaveGenres",
			Handler:    _OnboardingService_SaveGenres_Handler,
		},
		{
			MethodName: "SaveArtists",
			Handler:    _OnboardingService_SaveArtists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onboarding.proto",
}
