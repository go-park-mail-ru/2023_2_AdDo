// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/track/domain.go

// Package track_mock is a generated GoMock package.
package track_mock

import (
	track "main/internal/pkg/track"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetUserLikedTracks mocks base method.
func (m *MockUseCase) GetUserLikedTracks(userId string) ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLikedTracks", userId)
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLikedTracks indicates an expected call of GetUserLikedTracks.
func (mr *MockUseCaseMockRecorder) GetUserLikedTracks(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLikedTracks", reflect.TypeOf((*MockUseCase)(nil).GetUserLikedTracks), userId)
}

// IsLike mocks base method.
func (m *MockUseCase) IsLike(userId string, trackId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLike", userId, trackId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLike indicates an expected call of IsLike.
func (mr *MockUseCaseMockRecorder) IsLike(userId, trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLike", reflect.TypeOf((*MockUseCase)(nil).IsLike), userId, trackId)
}

// Like mocks base method.
func (m *MockUseCase) Like(userId string, trackId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", userId, trackId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Like indicates an expected call of Like.
func (mr *MockUseCaseMockRecorder) Like(userId, trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockUseCase)(nil).Like), userId, trackId)
}

// Listen mocks base method.
func (m *MockUseCase) Listen(userId string, trackId uint64, dur uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", userId, trackId, dur)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockUseCaseMockRecorder) Listen(userId, trackId, dur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockUseCase)(nil).Listen), userId, trackId, dur)
}

// Unlike mocks base method.
func (m *MockUseCase) Unlike(userId string, trackId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlike", userId, trackId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlike indicates an expected call of Unlike.
func (mr *MockUseCaseMockRecorder) Unlike(userId, trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlike", reflect.TypeOf((*MockUseCase)(nil).Unlike), userId, trackId)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddListen mocks base method.
func (m *MockRepository) AddListen(trackId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddListen", trackId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddListen indicates an expected call of AddListen.
func (mr *MockRepositoryMockRecorder) AddListen(trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddListen", reflect.TypeOf((*MockRepository)(nil).AddListen), trackId)
}

// CheckLike mocks base method.
func (m *MockRepository) CheckLike(userId string, trackId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLike", userId, trackId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLike indicates an expected call of CheckLike.
func (mr *MockRepositoryMockRecorder) CheckLike(userId, trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLike", reflect.TypeOf((*MockRepository)(nil).CheckLike), userId, trackId)
}

// CreateLike mocks base method.
func (m *MockRepository) CreateLike(userId string, trackId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", userId, trackId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockRepositoryMockRecorder) CreateLike(userId, trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockRepository)(nil).CreateLike), userId, trackId)
}

// CreateListen mocks base method.
func (m *MockRepository) CreateListen(userId string, trackId uint64, dur uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListen", userId, trackId, dur)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateListen indicates an expected call of CreateListen.
func (mr *MockRepositoryMockRecorder) CreateListen(userId, trackId, dur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListen", reflect.TypeOf((*MockRepository)(nil).CreateListen), userId, trackId, dur)
}

// CreateSkip mocks base method.
func (m *MockRepository) CreateSkip(userId string, trackId uint64, dur uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSkip", userId, trackId, dur)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSkip indicates an expected call of CreateSkip.
func (mr *MockRepositoryMockRecorder) CreateSkip(userId, trackId, dur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSkip", reflect.TypeOf((*MockRepository)(nil).CreateSkip), userId, trackId, dur)
}

// DeleteLike mocks base method.
func (m *MockRepository) DeleteLike(userId string, trackId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", userId, trackId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockRepositoryMockRecorder) DeleteLike(userId, trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockRepository)(nil).DeleteLike), userId, trackId)
}

// GetByAlbum mocks base method.
func (m *MockRepository) GetByAlbum(albumId uint64) ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAlbum", albumId)
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAlbum indicates an expected call of GetByAlbum.
func (mr *MockRepositoryMockRecorder) GetByAlbum(albumId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAlbum", reflect.TypeOf((*MockRepository)(nil).GetByAlbum), albumId)
}

// GetByArtist mocks base method.
func (m *MockRepository) GetByArtist(artistId uint64) ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByArtist", artistId)
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByArtist indicates an expected call of GetByArtist.
func (mr *MockRepositoryMockRecorder) GetByArtist(artistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByArtist", reflect.TypeOf((*MockRepository)(nil).GetByArtist), artistId)
}

// GetByPlaylist mocks base method.
func (m *MockRepository) GetByPlaylist(playlistId uint64) ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPlaylist", playlistId)
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPlaylist indicates an expected call of GetByPlaylist.
func (mr *MockRepositoryMockRecorder) GetByPlaylist(playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPlaylist", reflect.TypeOf((*MockRepository)(nil).GetByPlaylist), playlistId)
}

// GetByUser mocks base method.
func (m *MockRepository) GetByUser(userId string) ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", userId)
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockRepositoryMockRecorder) GetByUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockRepository)(nil).GetByUser), userId)
}

// GetHotTracks mocks base method.
func (m *MockRepository) GetHotTracks(userId string, count uint8) ([]track.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotTracks", userId, count)
	ret0, _ := ret[0].([]track.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotTracks indicates an expected call of GetHotTracks.
func (mr *MockRepositoryMockRecorder) GetHotTracks(userId, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotTracks", reflect.TypeOf((*MockRepository)(nil).GetHotTracks), userId, count)
}

// GetLastDayTracks mocks base method.
func (m *MockRepository) GetLastDayTracks(userId string) ([]track.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastDayTracks", userId)
	ret0, _ := ret[0].([]track.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastDayTracks indicates an expected call of GetLastDayTracks.
func (mr *MockRepositoryMockRecorder) GetLastDayTracks(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastDayTracks", reflect.TypeOf((*MockRepository)(nil).GetLastDayTracks), userId)
}

// GetTracksByIds mocks base method.
func (m *MockRepository) GetTracksByIds(ids []track.Id) ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByIds", ids)
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByIds indicates an expected call of GetTracksByIds.
func (mr *MockRepositoryMockRecorder) GetTracksByIds(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByIds", reflect.TypeOf((*MockRepository)(nil).GetTracksByIds), ids)
}

// Search mocks base method.
func (m *MockRepository) Search(text string) ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", text)
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockRepositoryMockRecorder) Search(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), text)
}
