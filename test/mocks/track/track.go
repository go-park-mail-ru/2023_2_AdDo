// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/pkg/track/domain.go

// Package track_mock is a generated GoMock package.
package track_mock

import (
	track "main/internal/pkg/track"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockUseCase) GetAll() ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUseCaseMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUseCase)(nil).GetAll))
}

// GetByAlbum mocks base method.
func (m *MockUseCase) GetByAlbum(albumId uint64) ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAlbum", albumId)
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAlbum indicates an expected call of GetByAlbum.
func (mr *MockUseCaseMockRecorder) GetByAlbum(albumId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAlbum", reflect.TypeOf((*MockUseCase)(nil).GetByAlbum), albumId)
}

// GetByArtist mocks base method.
func (m *MockUseCase) GetByArtist(artistId uint64) ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByArtist", artistId)
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByArtist indicates an expected call of GetByArtist.
func (mr *MockUseCaseMockRecorder) GetByArtist(artistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByArtist", reflect.TypeOf((*MockUseCase)(nil).GetByArtist), artistId)
}

// GetByPlaylist mocks base method.
func (m *MockUseCase) GetByPlaylist(playlistId uint64) ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPlaylist", playlistId)
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPlaylist indicates an expected call of GetByPlaylist.
func (mr *MockUseCaseMockRecorder) GetByPlaylist(playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPlaylist", reflect.TypeOf((*MockUseCase)(nil).GetByPlaylist), playlistId)
}

// GetLatest mocks base method.
func (m *MockUseCase) GetLatest(limit uint32) ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatest", limit)
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatest indicates an expected call of GetLatest.
func (mr *MockUseCaseMockRecorder) GetLatest(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatest", reflect.TypeOf((*MockUseCase)(nil).GetLatest), limit)
}

// GetPopular mocks base method.
func (m *MockUseCase) GetPopular(limit uint32) ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopular", limit)
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopular indicates an expected call of GetPopular.
func (mr *MockUseCaseMockRecorder) GetPopular(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopular", reflect.TypeOf((*MockUseCase)(nil).GetPopular), limit)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockRepository) GetAll() ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll))
}

// GetByTrackId mocks base method.
func (m *MockRepository) GetByTrackId(trackId uint64) (track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTrackId", trackId)
	ret0, _ := ret[0].(track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTrackId indicates an expected call of GetByTrackId.
func (mr *MockRepositoryMockRecorder) GetByTrackId(trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTrackId", reflect.TypeOf((*MockRepository)(nil).GetByTrackId), trackId)
}

// GetLatest mocks base method.
func (m *MockRepository) GetLatest(limit uint32) ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatest", limit)
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatest indicates an expected call of GetLatest.
func (mr *MockRepositoryMockRecorder) GetLatest(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatest", reflect.TypeOf((*MockRepository)(nil).GetLatest), limit)
}

// GetPopular mocks base method.
func (m *MockRepository) GetPopular(limit uint32) ([]track.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopular", limit)
	ret0, _ := ret[0].([]track.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopular indicates an expected call of GetPopular.
func (mr *MockRepositoryMockRecorder) GetPopular(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopular", reflect.TypeOf((*MockRepository)(nil).GetPopular), limit)
}

// GetTrackIdsByAlbum mocks base method.
func (m *MockRepository) GetTrackIdsByAlbum(albumId uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackIdsByAlbum", albumId)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackIdsByAlbum indicates an expected call of GetTrackIdsByAlbum.
func (mr *MockRepositoryMockRecorder) GetTrackIdsByAlbum(albumId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackIdsByAlbum", reflect.TypeOf((*MockRepository)(nil).GetTrackIdsByAlbum), albumId)
}

// GetTrackIdsByArtist mocks base method.
func (m *MockRepository) GetTrackIdsByArtist(artistId uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackIdsByArtist", artistId)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackIdsByArtist indicates an expected call of GetTrackIdsByArtist.
func (mr *MockRepositoryMockRecorder) GetTrackIdsByArtist(artistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackIdsByArtist", reflect.TypeOf((*MockRepository)(nil).GetTrackIdsByArtist), artistId)
}

// GetTrackIdsByPlaylist mocks base method.
func (m *MockRepository) GetTrackIdsByPlaylist(playlistId uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackIdsByPlaylist", playlistId)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackIdsByPlaylist indicates an expected call of GetTrackIdsByPlaylist.
func (mr *MockRepositoryMockRecorder) GetTrackIdsByPlaylist(playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackIdsByPlaylist", reflect.TypeOf((*MockRepository)(nil).GetTrackIdsByPlaylist), playlistId)
}
