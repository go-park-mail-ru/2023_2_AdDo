// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/playlist/domain.go

// Package playlist_mock is a generated GoMock package.
package playlist_mock

import (
	context "context"
	io "io"
	playlist "main/internal/pkg/playlist"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AddTrack mocks base method.
func (m *MockUseCase) AddTrack(playlistId, trackId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrack", playlistId, trackId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrack indicates an expected call of AddTrack.
func (mr *MockUseCaseMockRecorder) AddTrack(playlistId, trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrack", reflect.TypeOf((*MockUseCase)(nil).AddTrack), playlistId, trackId)
}

// CollectionPlaylists mocks base method.
func (m *MockUseCase) CollectionPlaylists(userId string) ([]playlist.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionPlaylists", userId)
	ret0, _ := ret[0].([]playlist.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectionPlaylists indicates an expected call of CollectionPlaylists.
func (mr *MockUseCaseMockRecorder) CollectionPlaylists(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionPlaylists", reflect.TypeOf((*MockUseCase)(nil).CollectionPlaylists), userId)
}

// Create mocks base method.
func (m *MockUseCase) Create(pl playlist.Base) (playlist.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", pl)
	ret0, _ := ret[0].(playlist.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUseCaseMockRecorder) Create(pl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUseCase)(nil).Create), pl)
}

// DeleteById mocks base method.
func (m *MockUseCase) DeleteById(playlistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", playlistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockUseCaseMockRecorder) DeleteById(playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockUseCase)(nil).DeleteById), playlistId)
}

// Get mocks base method.
func (m *MockUseCase) Get(playlistId uint64) (playlist.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", playlistId)
	ret0, _ := ret[0].(playlist.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUseCaseMockRecorder) Get(playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUseCase)(nil).Get), playlistId)
}

// GetUserPlaylists mocks base method.
func (m *MockUseCase) GetUserPlaylists(userId string) ([]playlist.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPlaylists", userId)
	ret0, _ := ret[0].([]playlist.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPlaylists indicates an expected call of GetUserPlaylists.
func (mr *MockUseCaseMockRecorder) GetUserPlaylists(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPlaylists", reflect.TypeOf((*MockUseCase)(nil).GetUserPlaylists), userId)
}

// HasModifyAccess mocks base method.
func (m *MockUseCase) HasModifyAccess(userId string, playlistId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasModifyAccess", userId, playlistId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasModifyAccess indicates an expected call of HasModifyAccess.
func (mr *MockUseCaseMockRecorder) HasModifyAccess(userId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasModifyAccess", reflect.TypeOf((*MockUseCase)(nil).HasModifyAccess), userId, playlistId)
}

// HasReadAccess mocks base method.
func (m *MockUseCase) HasReadAccess(playlistId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasReadAccess", playlistId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasReadAccess indicates an expected call of HasReadAccess.
func (mr *MockUseCaseMockRecorder) HasReadAccess(playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasReadAccess", reflect.TypeOf((*MockUseCase)(nil).HasReadAccess), playlistId)
}

// IsCreator mocks base method.
func (m *MockUseCase) IsCreator(userId string, playlistId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCreator", userId, playlistId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCreator indicates an expected call of IsCreator.
func (mr *MockUseCaseMockRecorder) IsCreator(userId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCreator", reflect.TypeOf((*MockUseCase)(nil).IsCreator), userId, playlistId)
}

// IsLike mocks base method.
func (m *MockUseCase) IsLike(userId string, playlistId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLike", userId, playlistId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLike indicates an expected call of IsLike.
func (mr *MockUseCaseMockRecorder) IsLike(userId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLike", reflect.TypeOf((*MockUseCase)(nil).IsLike), userId, playlistId)
}

// Like mocks base method.
func (m *MockUseCase) Like(userId string, playlistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", userId, playlistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Like indicates an expected call of Like.
func (mr *MockUseCaseMockRecorder) Like(userId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockUseCase)(nil).Like), userId, playlistId)
}

// MakePrivate mocks base method.
func (m *MockUseCase) MakePrivate(playlistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePrivate", playlistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakePrivate indicates an expected call of MakePrivate.
func (mr *MockUseCaseMockRecorder) MakePrivate(playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePrivate", reflect.TypeOf((*MockUseCase)(nil).MakePrivate), playlistId)
}

// MakePublic mocks base method.
func (m *MockUseCase) MakePublic(playlistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePublic", playlistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakePublic indicates an expected call of MakePublic.
func (mr *MockUseCaseMockRecorder) MakePublic(playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePublic", reflect.TypeOf((*MockUseCase)(nil).MakePublic), playlistId)
}

// RemovePreview mocks base method.
func (m *MockUseCase) RemovePreview(playlistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePreview", playlistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePreview indicates an expected call of RemovePreview.
func (mr *MockUseCaseMockRecorder) RemovePreview(playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePreview", reflect.TypeOf((*MockUseCase)(nil).RemovePreview), playlistId)
}

// RemoveTrack mocks base method.
func (m *MockUseCase) RemoveTrack(playlistId, trackId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTrack", playlistId, trackId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTrack indicates an expected call of RemoveTrack.
func (mr *MockUseCaseMockRecorder) RemoveTrack(playlistId, trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrack", reflect.TypeOf((*MockUseCase)(nil).RemoveTrack), playlistId, trackId)
}

// Unlike mocks base method.
func (m *MockUseCase) Unlike(userId string, playlistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlike", userId, playlistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlike indicates an expected call of Unlike.
func (mr *MockUseCaseMockRecorder) Unlike(userId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlike", reflect.TypeOf((*MockUseCase)(nil).Unlike), userId, playlistId)
}

// UpdateName mocks base method.
func (m *MockUseCase) UpdateName(playlistId uint64, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", playlistId, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockUseCaseMockRecorder) UpdateName(playlistId, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockUseCase)(nil).UpdateName), playlistId, newName)
}

// UpdatePreview mocks base method.
func (m *MockUseCase) UpdatePreview(playlistId uint64, src io.Reader, size int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePreview", playlistId, src, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePreview indicates an expected call of UpdatePreview.
func (mr *MockUseCaseMockRecorder) UpdatePreview(playlistId, src, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreview", reflect.TypeOf((*MockUseCase)(nil).UpdatePreview), playlistId, src, size)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddTrack mocks base method.
func (m *MockRepository) AddTrack(ctx context.Context, playlistId, trackId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrack", ctx, playlistId, trackId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrack indicates an expected call of AddTrack.
func (mr *MockRepositoryMockRecorder) AddTrack(ctx, playlistId, trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrack", reflect.TypeOf((*MockRepository)(nil).AddTrack), ctx, playlistId, trackId)
}

// CheckLike mocks base method.
func (m *MockRepository) CheckLike(ctx context.Context, userId string, playlistId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLike", ctx, userId, playlistId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLike indicates an expected call of CheckLike.
func (mr *MockRepositoryMockRecorder) CheckLike(ctx, userId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLike", reflect.TypeOf((*MockRepository)(nil).CheckLike), ctx, userId, playlistId)
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, pl playlist.Base) (playlist.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pl)
	ret0, _ := ret[0].(playlist.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, pl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, pl)
}

// CreateLike mocks base method.
func (m *MockRepository) CreateLike(ctx context.Context, userId string, playlistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", ctx, userId, playlistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockRepositoryMockRecorder) CreateLike(ctx, userId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockRepository)(nil).CreateLike), ctx, userId, playlistId)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, playlistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, playlistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, playlistId)
}

// DeleteLike mocks base method.
func (m *MockRepository) DeleteLike(ctx context.Context, userId string, playlistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", ctx, userId, playlistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockRepositoryMockRecorder) DeleteLike(ctx, userId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockRepository)(nil).DeleteLike), ctx, userId, playlistId)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, playlistId uint64) (playlist.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, playlistId)
	ret0, _ := ret[0].(playlist.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, playlistId)
}

// GetByCreatorId mocks base method.
func (m *MockRepository) GetByCreatorId(ctx context.Context, userId string) ([]playlist.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCreatorId", ctx, userId)
	ret0, _ := ret[0].([]playlist.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCreatorId indicates an expected call of GetByCreatorId.
func (mr *MockRepositoryMockRecorder) GetByCreatorId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCreatorId", reflect.TypeOf((*MockRepository)(nil).GetByCreatorId), ctx, userId)
}

// GetByUserId mocks base method.
func (m *MockRepository) GetByUserId(ctx context.Context, userId string) ([]playlist.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", ctx, userId)
	ret0, _ := ret[0].([]playlist.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockRepositoryMockRecorder) GetByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockRepository)(nil).GetByUserId), ctx, userId)
}

// IsCreator mocks base method.
func (m *MockRepository) IsCreator(ctx context.Context, userId string, playlistId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCreator", ctx, userId, playlistId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCreator indicates an expected call of IsCreator.
func (mr *MockRepositoryMockRecorder) IsCreator(ctx, userId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCreator", reflect.TypeOf((*MockRepository)(nil).IsCreator), ctx, userId, playlistId)
}

// IsPrivate mocks base method.
func (m *MockRepository) IsPrivate(ctx context.Context, playlistId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPrivate", ctx, playlistId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPrivate indicates an expected call of IsPrivate.
func (mr *MockRepositoryMockRecorder) IsPrivate(ctx, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPrivate", reflect.TypeOf((*MockRepository)(nil).IsPrivate), ctx, playlistId)
}

// MakePrivate mocks base method.
func (m *MockRepository) MakePrivate(ctx context.Context, playlistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePrivate", ctx, playlistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakePrivate indicates an expected call of MakePrivate.
func (mr *MockRepositoryMockRecorder) MakePrivate(ctx, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePrivate", reflect.TypeOf((*MockRepository)(nil).MakePrivate), ctx, playlistId)
}

// MakePublic mocks base method.
func (m *MockRepository) MakePublic(ctx context.Context, playlistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePublic", ctx, playlistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakePublic indicates an expected call of MakePublic.
func (mr *MockRepositoryMockRecorder) MakePublic(ctx, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePublic", reflect.TypeOf((*MockRepository)(nil).MakePublic), ctx, playlistId)
}

// RemovePreviewPath mocks base method.
func (m *MockRepository) RemovePreviewPath(ctx context.Context, playlistId uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePreviewPath", ctx, playlistId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePreviewPath indicates an expected call of RemovePreviewPath.
func (mr *MockRepositoryMockRecorder) RemovePreviewPath(ctx, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePreviewPath", reflect.TypeOf((*MockRepository)(nil).RemovePreviewPath), ctx, playlistId)
}

// RemoveTrack mocks base method.
func (m *MockRepository) RemoveTrack(ctx context.Context, playlistId, trackId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTrack", ctx, playlistId, trackId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTrack indicates an expected call of RemoveTrack.
func (mr *MockRepositoryMockRecorder) RemoveTrack(ctx, playlistId, trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrack", reflect.TypeOf((*MockRepository)(nil).RemoveTrack), ctx, playlistId, trackId)
}

// Search mocks base method.
func (m *MockRepository) Search(ctx context.Context, text string) ([]playlist.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, text)
	ret0, _ := ret[0].([]playlist.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockRepositoryMockRecorder) Search(ctx, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), ctx, text)
}

// UpdateImage mocks base method.
func (m *MockRepository) UpdateImage(ctx context.Context, playlistId uint64, image string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", ctx, playlistId, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImage indicates an expected call of UpdateImage.
func (mr *MockRepositoryMockRecorder) UpdateImage(ctx, playlistId, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockRepository)(nil).UpdateImage), ctx, playlistId, image)
}

// UpdateName mocks base method.
func (m *MockRepository) UpdateName(ctx context.Context, playlistId uint64, title string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", ctx, playlistId, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockRepositoryMockRecorder) UpdateName(ctx, playlistId, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockRepository)(nil).UpdateName), ctx, playlistId, title)
}
