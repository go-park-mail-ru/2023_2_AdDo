// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/artist/domain.go

// Package artist_mock is a generated GoMock package.
package artist_mock

import (
	artist "main/internal/pkg/artist"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(track artist.Artist) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", track)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(track interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), track)
}

// GetByAlbumId mocks base method.
func (m *MockRepository) GetByAlbumId(albumId uint64) (artist.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAlbumId", albumId)
	ret0, _ := ret[0].(artist.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAlbumId indicates an expected call of GetByAlbumId.
func (mr *MockRepositoryMockRecorder) GetByAlbumId(albumId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAlbumId", reflect.TypeOf((*MockRepository)(nil).GetByAlbumId), albumId)
}

// GetById mocks base method.
func (m *MockRepository) GetById(id uint64) (artist.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(artist.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRepositoryMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRepository)(nil).GetById), id)
}

// GetByTrackId mocks base method.
func (m *MockRepository) GetByTrackId(trackId uint64) ([]artist.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTrackId", trackId)
	ret0, _ := ret[0].([]artist.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTrackId indicates an expected call of GetByTrackId.
func (mr *MockRepositoryMockRecorder) GetByTrackId(trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTrackId", reflect.TypeOf((*MockRepository)(nil).GetByTrackId), trackId)
}
