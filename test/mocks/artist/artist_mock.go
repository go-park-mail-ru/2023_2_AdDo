// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/artist/domain.go

// Package artist_mock is a generated GoMock package.
package artist_mock

import (
	artist "main/internal/pkg/artist"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetArtistInfo mocks base method.
func (m *MockUseCase) GetArtistInfo(artistId uint64) (artist.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistInfo", artistId)
	ret0, _ := ret[0].(artist.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistInfo indicates an expected call of GetArtistInfo.
func (mr *MockUseCaseMockRecorder) GetArtistInfo(artistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistInfo", reflect.TypeOf((*MockUseCase)(nil).GetArtistInfo), artistId)
}

// IsLike mocks base method.
func (m *MockUseCase) IsLike(userId string, artistId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLike", userId, artistId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLike indicates an expected call of IsLike.
func (mr *MockUseCaseMockRecorder) IsLike(userId, artistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLike", reflect.TypeOf((*MockUseCase)(nil).IsLike), userId, artistId)
}

// Like mocks base method.
func (m *MockUseCase) Like(userId string, artistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", userId, artistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Like indicates an expected call of Like.
func (mr *MockUseCaseMockRecorder) Like(userId, artistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockUseCase)(nil).Like), userId, artistId)
}

// Unlike mocks base method.
func (m *MockUseCase) Unlike(userId string, artistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlike", userId, artistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlike indicates an expected call of Unlike.
func (mr *MockUseCaseMockRecorder) Unlike(userId, artistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlike", reflect.TypeOf((*MockUseCase)(nil).Unlike), userId, artistId)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckLike mocks base method.
func (m *MockRepository) CheckLike(userId string, artistId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLike", userId, artistId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLike indicates an expected call of CheckLike.
func (mr *MockRepositoryMockRecorder) CheckLike(userId, artistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLike", reflect.TypeOf((*MockRepository)(nil).CheckLike), userId, artistId)
}

// CreateLike mocks base method.
func (m *MockRepository) CreateLike(userId string, artistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", userId, artistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockRepositoryMockRecorder) CreateLike(userId, artistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockRepository)(nil).CreateLike), userId, artistId)
}

// DeleteLike mocks base method.
func (m *MockRepository) DeleteLike(userId string, artistId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", userId, artistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockRepositoryMockRecorder) DeleteLike(userId, artistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockRepository)(nil).DeleteLike), userId, artistId)
}

// Get mocks base method.
func (m *MockRepository) Get(artistId uint64) (artist.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", artistId)
	ret0, _ := ret[0].(artist.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(artistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), artistId)
}

// GetByAlbumId mocks base method.
func (m *MockRepository) GetByAlbumId(albumId uint64) (artist.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAlbumId", albumId)
	ret0, _ := ret[0].(artist.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAlbumId indicates an expected call of GetByAlbumId.
func (mr *MockRepositoryMockRecorder) GetByAlbumId(albumId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAlbumId", reflect.TypeOf((*MockRepository)(nil).GetByAlbumId), albumId)
}

// GetByTrackId mocks base method.
func (m *MockRepository) GetByTrackId(trackId uint64) ([]artist.Base, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTrackId", trackId)
	ret0, _ := ret[0].([]artist.Base)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTrackId indicates an expected call of GetByTrackId.
func (mr *MockRepositoryMockRecorder) GetByTrackId(trackId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTrackId", reflect.TypeOf((*MockRepository)(nil).GetByTrackId), trackId)
}
