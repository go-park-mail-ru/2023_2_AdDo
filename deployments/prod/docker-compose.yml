version: '3.9'

services:
  service-minio:
    extends:
      file: ../minio-services.yml
      service: service-minio
    ports:
      - "9000:9000"
      - "9001:9001" # redundant
    volumes:
      - ~/minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      retries: 3
      timeout: 5s
    logging:
      driver: "fluentd"
      options: 
        fluentd-async-connect: "true"
        tag: "backend.minio"

  create_buckets:
    extends:
      file: ../minio-services.yml
      service: create_buckets
    depends_on:
      service-minio:
        condition: service_healthy

  service-db-redis:
    extends:
      file: ../common-services.yml
      service: service-db-redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "fluentd"
      options: 
        fluentd-async-connect: "true"
        tag: "backend.redis"

  service-db-postgres:
    extends:
      file: ../common-services.yml
      service: service-db-postgres
    ports:
      - "5432:5432" # redundant
    volumes:
      - ~/db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U musicon" ]
      interval: 10s
      retries: 3
      timeout: 5s
    logging:
      driver: "fluentd"
      options: 
        fluentd-async-connect: "true"
        tag: "backend.postgres"

  consul:
    image: consul:1.15
    ports:
      - "8500:8500"

  common-service-waiter:
    image: alpine
    depends_on:
      service-db-postgres:
        condition: service_healthy
      service-db-redis:
        condition: service_healthy
      service-minio:
        condition: service_healthy
      create_buckets:
        condition: service_completed_successfully
      consul:
        condition: service_started
    command: "ls"

  user:
    extends:
      file: ../microservices/user/user-microservice.yml
      service: user
    deploy:
      replicas: 1
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    env_file:
      - .env

  session:
    extends:
      file: ../microservices/session/session-microservice.yml
      service: session
    deploy:
      replicas: 1
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    env_file:
      - .env

  track:
    extends:
      file: ../microservices/track/track-microservice.yml
      service: track
    deploy:
      replicas: 1
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    env_file:
      - .env

  album:
    extends:
      file: ../microservices/album/album-microservice.yml
      service: album
    deploy:
      replicas: 1
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    env_file:
      - .env

  playlist:
    extends:
      file: ../microservices/playlist/playlist-microservice.yml
      service: playlist
    deploy:
      replicas: 1
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    env_file:
      - .env

  artist:
    extends:
      file: ../microservices/artist/artist-microservice.yml
      service: artist
    deploy:
      replicas: 1
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    env_file:
      - .env

  image:
    extends:
      file: ../microservices/image/image-microservice.yml
      service: image
    deploy:
      replicas: 1
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    env_file:
      - .env

  microservice-waiter:
    image: alpine
    depends_on:
      user:
        condition: service_started
      session:
        condition: service_started
      track:
        condition: service_started
      album:
        condition: service_started
      playlist:
        condition: service_started
      artist:
        condition: service_started
      image:
        condition: service_started

  musicon:
    extends:
      file: ../entrypoint/gateway.yml
      service: musicon
    ports:
      - "8080:8080"
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
      microservice-waiter:
        condition: service_completed_successfully
    logging:
      driver: "fluentd"
      options: 
        fluentd-async-connect: "true"
        tag: "backend.server"

  wait-musicon:
    image: alpine
    depends_on:
      musicon:
        condition: service_started
        
  service-fluentd:
    extends:
      file: ../fluentd-service.yml
      service: fluentd
