version: '3.9'

services:
  service-minio:
    restart: always
    image: minio/minio:RELEASE.2023-10-25T06-33-25Z
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      retries: 3
      timeout: 5s
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ~/minio-data:/data
   
  create_buckets:
    image: minio/mc
    depends_on:
      service-minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set musicon http://service-minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
      /usr/bin/mc mb --ignore-existing musicon/user-avatar;
      /usr/bin/mc mb --ignore-existing musicon/playlist-image;
      /usr/bin/mc anonymous set download musicon/user-avatar;
      /usr/bin/mc anonymous set download musicon/playlist-image;
      exit 0;
      "

  service-db-redis:
    restart: always
    image: redis

  service-db-postgres:
    extends:
      file: ../common-services.yml
      service: service-db-postgres
    ports:
      - "5432:5432" # redundant
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U musicon" ]
      interval: 10s
      retries: 3
      timeout: 5s

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
#    healthcheck:
#      test: echo mntr | nc localhost 2181 | grep -q 'zk_server_state\tleader'
#      interval: 10s
#      timeout: 5s
#      retries: 3

  kafka:
    image: confluentinc/cp-kafka:6.2.1
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#    healthcheck:
#      test: kafka-topics --create --topic healthcheck --partitions 1 --replication-factor 1 --bootstrap-server localhost:9092 && kafka-topics --topic healthcheck --delete --bootstrap-server localhost:9092
#      interval: 5s
#      timeout: 5s
#      retries: 3

  memcached:
    image: memcached
    ports:
      - "11211:11211"

  common-service-waiter:
    image: alpine
    depends_on:
      service-db-postgres:
        condition: service_started
      service-db-redis:
        condition: service_started
      service-minio:
        condition: service_started
      create_buckets:
        condition: service_completed_successfully
      kafka:
        condition: service_started
      memcached:
        condition: service_started

  user:
    image: registry.musicon.space/user:test
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/user"

  session:
    image: registry.musicon.space/session:test
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/session"

  track:
    image: registry.musicon.space/track:test
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/track"


  album:
    image: registry.musicon.space/album:test
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/album"


  playlist:
    image: registry.musicon.space/playlist:test
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/playlist"


  artist:
    image: registry.musicon.space/artist:test
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/artist"

  images:
    image: registry.musicon.space/images:test
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/images"

  activity_worker:
    image: registry.musicon.space/activity_worker:test
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/activity_worker"

  candidate:
    image: registry.musicon.space/candidate:test
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/candidate"

  onboarding:
    image: registry.musicon.space/onboarding:test
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/onboarding"

  daily_playlist_worker:
    image: registry.musicon.space/daily_playlist_worker:test
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/daily_playlist_worker"

  daily_playlist_service:
    image: registry.musicon.space/daily_playlist_service:test
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/daily_playlist_service"

  recommendation:
    image: registry.musicon.space/recommendation:test
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/recommendation"

  wave:
    image: registry.musicon.space/wave:test
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/wave"

  microservice-waiter:
    image: alpine
    depends_on:
      user:
        condition: service_started
      session:
        condition: service_started
      track:
        condition: service_started
      album:
        condition: service_started
      playlist:
        condition: service_started
      artist:
        condition: service_started
      images:
        condition: service_started
      activity_worker:
        condition: service_started
      candidate:
        condition: service_started
      daily_playlist_service:
        condition: service_started
      daily_playlist_worker:
        condition: service_started
      onboarding:
        condition: service_started
      recommendation:
        condition: service_started
      wave:
        condition: service_started

  musicon:
    image: registry.musicon.space/entrypoint:test
    ports:
      - "8888:8080"
    depends_on:
      common-service-waiter:
        condition: service_completed_successfully
      microservice-waiter:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: "${DATABASE_URL}"
    command: "/entrypoint"
