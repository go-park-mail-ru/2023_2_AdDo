basePath: /api/v1
definitions:
  album.Base:
    properties:
      Id:
        example: 1
        type: integer
      Name:
        example: AlbumName
        type: string
      Preview:
        example: AlbumPreview
        type: string
    type: object
  album.Response:
    properties:
      ArtistId:
        example: 1
        type: integer
      ArtistName:
        example: ArtistName
        type: string
      Id:
        example: 1
        type: integer
      Name:
        example: AlbumName
        type: string
      Preview:
        example: AlbumPreview
        type: string
      Tracks:
        items:
          $ref: '#/definitions/track.Response'
        type: array
    type: object
  artist.Response:
    properties:
      Albums:
        items:
          $ref: '#/definitions/album.Base'
        type: array
      Avatar:
        example: ArtistAvatar
        type: string
      Id:
        example: 1
        type: integer
      Name:
        example: ArtistName
        type: string
      Tracks:
        items:
          $ref: '#/definitions/track.Response'
        type: array
    type: object
  track.Response:
    properties:
      Content:
        example: TrackContent
        type: string
      Id:
        example: 1
        type: integer
      Name:
        example: TrackName
        type: string
      Preview:
        example: TrackPreview
        type: string
    type: object
  user_domain.UploadAvatarResponse:
    properties:
      AvatarUrl:
        example: /user-avatar/avatar.png
        type: string
    type: object
  user_domain.User:
    properties:
      Avatar:
        example: http://test/image/1.jpg,http://test/image/2.jpg
        type: string
      BirthDate:
        example: "2000-01-01"
        type: string
      Email:
        example: example@gmail.com
        type: string
      Id:
        example: qwer-werw-we4w
        type: string
      Password:
        example: password
        type: string
      Username:
        example: john
        type: string
    type: object
  user_domain.UserCredentials:
    properties:
      Email:
        example: example@gmail.com
        type: string
      Password:
        example: password
        type: string
    type: object
host: musicon.space
info:
  contact: {}
  description: Music web app
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: MusicOn API
  version: "1.0"
paths:
  /album/{id}:
    get:
      description: return album info with all tracks
      parameters:
      - description: album id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/album.Response'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      tags:
      - album
  /artist/{id}:
    get:
      description: return artist info
      parameters:
      - description: artist id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/artist.Response'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      tags:
      - artist
  /auth:
    get:
      description: check user's authentication by cookie and set csrf-token
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: Set X-Csrf-Token in Cookie
              type: string
            X-Csrf-Token:
              description: Set X-Csrf-Token in header
              type: string
        "401":
          description: Unauthorized
          headers:
            Set-Cookie:
              description: Set X-Csrf-Token in Cookie
              type: string
            X-Csrf-Token:
              description: Set X-Csrf-Token in header
              type: string
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - cookieAuth: []
      tags:
      - user
  /feed:
    get:
      description: return all albums
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/album.Response'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      tags:
      - album
  /like:
    post:
      consumes:
      - application/json
      description: like track
      parameters:
      - description: track id
        in: body
        name: trackId
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/track.Response'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - csrfToken: []
      - cookieCsrfToken: []
      tags:
      - track
  /listen:
    post:
      consumes:
      - application/json
      description: listen track
      parameters:
      - description: track id
        in: body
        name: trackId
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - csrfToken: []
      - cookieCsrfToken: []
      tags:
      - track
  /login:
    post:
      consumes:
      - application/json
      description: login user
      parameters:
      - description: User email and password
        in: body
        name: userCrds
        required: true
        schema:
          $ref: '#/definitions/user_domain.UserCredentials'
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: Set JSESSIONID in Cookie
              type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - csrfToken: []
      - cookieCsrfToken: []
      tags:
      - user
  /logout:
    post:
      description: logout user
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - cookieAuth: []
      - csrfToken: []
      - cookieCsrfToken: []
      tags:
      - user
  /me:
    get:
      description: get user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_domain.User'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - cookieAuth: []
      - csrfToken: []
      - cookieCsrfToken: []
      tags:
      - user
  /most_liked:
    get:
      description: return albums sorted by likes count
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/album.Response'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      tags:
      - album
  /new:
    get:
      description: return new albums
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/album.Response'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      tags:
      - album
  /popular:
    get:
      description: return albums sorted by listen count
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/album.Response'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      tags:
      - album
  /remove_avatar:
    post:
      description: Remove user avatar
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - cookieAuth: []
      - csrfToken: []
      - cookieCsrfToken: []
      tags:
      - user
  /sign_up:
    post:
      consumes:
      - application/json
      description: register user
      parameters:
      - description: User data
        in: body
        name: userData
        required: true
        schema:
          $ref: '#/definitions/user_domain.User'
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: Set JSESSIONID in Cookie
              type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - csrfToken: []
      - cookieCsrfToken: []
      tags:
      - user
  /upload_avatar:
    post:
      description: Upload user avatar
      parameters:
      - description: User avatar
        in: formData
        name: Avatar
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_domain.UploadAvatarResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - cookieAuth: []
      - csrfToken: []
      - cookieCsrfToken: []
      tags:
      - user
securityDefinitions:
  cookieAuth:
    in: cookie
    name: JSESSIONID
    type: apiKey
  cookieCsrfToken:
    in: cookie
    name: X-Csrf-Token
    type: apiKey
  csrfToken:
    in: header
    name: X-Csrf-Token
    type: apiKey
swagger: "2.0"
